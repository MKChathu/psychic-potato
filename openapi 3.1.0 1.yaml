openapi: 3.1.0
info:
  title: Swagger Petstore - OpenAPI 3.0
  summary: Sample Pet Store Server based on the OpenAPI 3.1 specification.
  description: >-
    This is a sample Pet Store Server based on the OpenAPI 3.0
    specification.  You can find out more about

    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!

    You can now help us improve the API whether it's by making changes to the definition itself or to the code.

    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.


    Some useful links:

    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)

    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
security:
  - api_key: []
servers:
  - url: /api/v3
  - url: https://petstore.swagger.io/v2
    description: The production API server
  - url: https://{username}.gigantic-server.com:{port}/{basePath}
    description: The production API server
    variables:
      username:
        default: demo
        description: this value is assigned by the service provider, in this example
          `gigantic-server.com`
      port:
        enum:
          - "8443"
          - "443"
        default: "8443"
      basePath:
        default: v2
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /pet:
    summary: "This is the Test example "
    servers:
      - url: https://{username}.gigantic-server.com:{port}/{basePath}
        description: The production API server
        variables:
          username:
            default: demo
            description: this value is assigned by the service provider, in this example
              `gigantic-server.com`
          port:
            enum:
              - "8443"
              - "443"
            default: "8443"
          basePath:
            default: v2
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: This is a sample Pet Store Server based on the OpenAPI 3.0
        specification.Update an existing pet by Id.
      operationId: updatePet
      deprecated: false
      externalDocs:
        description: Find out more about update pet Id
        url: http://swagger.io
      servers:
        - url: https://petstore.swagger.io/v2
          description: The production API server
      requestBody:
        $ref: "#/components/requestBodies/PetRequest"
      callbacks:
        inProgress:
          $ref: "#/components/callbacks/inProgress"
        success:
          "{$request.body#/failedUrl}":
            post:
              requestBody:
                $ref: "#/components/requestBodies/PetRequest"
              responses:
                "200":
                  description: OK
          "{$request.body#/successUrl}":
            post:
              requestBody:
                $ref: "#/components/requestBodies/UserArray"
              responses:
                "200":
                  description: OK
      responses:
        "200":
          $ref: "#/components/responses/success2"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
          application/xml:
            schema:
              $ref: "#/components/schemas/Pet"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  "/pet/{petId}":
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ""
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          example: 19
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          allowReserved: true
          allowEmptyValue: true
          examples:
            xmlExample:
              summary: This is an example in XML
              externalValue: http://example.org/examples/address-example.xml
            TestExample:
              summary: "This is the Test example "
              value: TEST VALUE
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
        - name: petName
          deprecated: true
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: array
            items:
              type: string
      responses:
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ""
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  "/pet/{petId}/uploadImage":
    post:
      tags:
        - pet
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
          application/xml:
            schema:
              $ref: "#/components/schemas/Order"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "405":
          description: Invalid input
  "/store/order/{orderId}":
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/operation:
    $ref: "#/components/pathItems/EntityOperations"
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
webhooks:
  newPet:
    get:
      description: Returns pets based on ID
      summary: Find pets by ID
      operationId: getPetsById
      responses:
        "200":
          description: pet response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        default:
          description: error payload
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/Address"
    parameters:
      - name: skip
        in: query
        description: number of items to skip
        required: true
        schema:
          type: integer
          format: int32
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    CampaignObject:
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          example: "123"
        type:
          type: string
          enum:
            - campaigns
        attributes:
          type: object
          required:
            - name
            - roles
            - status
            - created
          properties:
            uuid:
              type: string
              description: Common id between Campaigns and Drafts
              example: 44b87585-d856-42ae-aaff-1a6892bad075
            name:
              type: string
              example: My Jeto Campaign
            roles:
              type: array
              items:
                type: string
                enum:
                  - ADMIN
                  - USER
                  - EDITOR
                  - APPROVER
                  - VIEWER
              example:
                - USER
                - EDITOR
            status:
              type: string
              enum:
                - DRAFT
                - PENDING
                - CHANGE_REQUEST
                - ERROR
                - IN_APPROVAL
                - APPROVED
                - SUBMITTED
            created:
              type: string
              example: 2020-08-05T11:04:59.255Z
            updated:
              type: string
              example: 2020-08-05T11:04:59.46
            comments_opened:
              type: number
              example: 7
            comments_resolved:
              type: number
              example: 3
            comments_deleted:
              type: number
              example: 2
            program_url:
              type: string
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          $ref: "#/components/schemas/Customer"
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      externalDocs:
        description: Find out more about Swagger
        url: http://swagger.io
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          description: Returns a single pet
          nullable: true
          type: string
          example: doggie
          writeOnly: false
          minimum: 100
          maximum: 600
        category:
          title: test
          oneOf:
            - $ref: "#/components/schemas/Category"
        photoUrls:
          deprecated: false
          type: array
          xml:
            wrapped: true
            name: photoUrl
          example:
            - one
            - two
            - three
          items:
            type: string
            xml:
              name: Array
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
    CampaignCreateObject:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - campaignDrafts
                - campaigns
            attributes:
              type: object
              required:
                - launcher_id
                - form
              properties:
                launcher_id:
                  description: Previously known as brief_id
                  type: number
                  example: 123
                campaign_draft_id:
                  description: Previously known as campaign_brief_draft_id
                  type: number
                  example: 456
                email_modules:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - is_deleted
                    properties:
                      id:
                        type: integer
                        example: 1
                      is_deleted:
                        type: boolean
                        example: true
                lp_variables:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - variable_value
                    properties:
                      id:
                        type: number
                        example: 1
                      variable_value:
                        description: Formerly a string should be changed to boolean
                        type: boolean
                        example: false
                form:
                  type: array
                  items:
                    type: object
                    example:
                      Jeto-Campaign-Name: Test campaign
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
  links:
    GetUserByUsername:
      operationId: getUserByName
      parameters:
        userName: $response.body#/name
      requestBody: $response.body#/name
      description: >
        The `id` value returned in the response can be used as the `userId`
        parameter in `GET /users/{userId}`.
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Order"
    success1:
      description: successful operation
      headers:
        X-Rate-Limit:
          description: calls per hour allowed by the user
          schema:
            type: integer
            format: int32
        X-Expires-After:
          description: date in UTC when token expires
          schema:
            type: string
            format: date-time
      content:
        application/xml:
          schema:
            type: string
        application/json:
          schema:
            type: string
    success2:
      description: Successful operation
      content:
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
      links:
        GetUserByUsername:
          operationId: getUser
          parameters:
            userId: $response.body#/id
            userName: $response.body#/name
          description: >
            The `id` value returned in the response can be used as the `userId`
            parameter in `GET /users/{userId}`.
        SetManagerId:
          operationId: setUserManager
          requestBody: $response.body#/id
  headers:
    X-Correlation-ID:
      required: true
      description: X-Correlation-ID custom header is used to uniquely identify the
        client that requested the resource
      schema:
        type: string
        example: b224db13-6b19-4345-a112-d43505878260
    X-App-ID:
      required: true
      description: X-App-ID custom header is used to uniquely identify the app that
        consumes the API.
      schema:
        type: string
        example: b2d435058782
    Location:
      required: false
      description: The Location header provides information about the location of the
        newly created resource
      schema:
        type: string
        example: https://{apiBaseUrl}/files/55341
  requestBodies:
    PetRequest:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  callbacks:
    inProgress:
      "{$request.body#/inProgressUrl}":
        post:
          requestBody:
            $ref: "#/components/requestBodies/UserArray"
          responses:
            "200":
              description: OK
      "{$request.body#/failedUrl}":
        post:
          requestBody:
            $ref: "#/components/requestBodies/PetRequest"
          responses:
            "200":
              description: OK
      "{$request.body#/successUrl}":
        post:
          requestBody:
            $ref: "#/components/requestBodies/UserArray"
          responses:
            "200":
              description: OK
    success:
      "{$request.body#/failedUrl}":
        post:
          requestBody:
            $ref: "#/components/requestBodies/PetRequest"
          responses:
            "200":
              description: OK
      "{$request.body#/successUrl}":
        post:
          requestBody:
            $ref: "#/components/requestBodies/UserArray"
          responses:
            "200":
              description: OK
  pathItems:
    EntityOperations:
      get:
        summary: Get all items
        description: This operation supports pagination
        parameters:
          - $ref: "#/components/parameters/skipParam"
          - $ref: "#/components/parameters/limitParam"
        responses:
          "200":
            description: A list of items
          default:
            $ref: "#/components/responses/GeneralError"
      post:
        summary: Add a new item
        requestBody:
          $ref: "#/components/requestBodies/PetRequest"
        responses:
          "201":
            description: Created
    CampaignsOperations:
      post:
        summary: Create a new Campaign
        description: This operation creates a new Campaign
        tags:
          - campaigns
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignCreateObject"
        responses:
          "200":
            description: Successfully created new campaign
            content:
              application/json:
                schema:
                  type: object
                  required:
                    - status
                    - data
                  properties:
                    status:
                      type: string
                      enum:
                        - success
                    data:
                      type: object
                      properties:
                        campaign:
                          $ref: "#/components/schemas/CampaignObject"
  examples:
    tshirt:
      summary: Sample T-shirt data
      value:
        id: 17
        name: T-shirt
        description: 100% cotton shirt
        categories:
          - clothes
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    basicAuth2:
      type: http
      scheme: bearer
      bearerFormat: JWT
    IdConnect:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          refreshUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
        password:
          tokenUrl: https://petstore3.swagger.io/oauth/authorize
          refreshUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
        clientCredentials:
          tokenUrl: https://petstore3.swagger.io/oauth/authorize
          refreshUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
        authorizationCode:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          tokenUrl: https://petstore3.swagger.io/oauth/authorize
          refreshUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    folderstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://folderstore.swagger.io/oauth/dialog
          scopes:
            write:folders: modify folders in your account
            read:folders: read your folders
    api_key:
      type: apiKey
      name: api_key
      in: header
    api_key2:
      type: apiKey
      name: api_key2
      in: header
